"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const QWidget_1 = require("../QWidget");
describe('QWidget', () => {
    const view = new QWidget_1.QWidget();
    afterAll(() => {
        if (view) {
            view.close();
            view = null;
        }
    });
    it('instantiate a view instance', () => {
        expect(view.inherits('QWidget')).toBe(true);
    });
    it('show', () => {
        view.show();
        expect(view.isVisible()).toEqual(true);
    });
    it('hide', () => {
        view.hide();
        expect(view.isVisible()).toEqual(false);
    });
    it('setStyleSheet', () => __awaiter(void 0, void 0, void 0, function* () {
        yield view.setStyleSheet(`
    #test {
      color: blue;
    }`);
        expect(view.styleSheet()).toEqual(`
    #test {
      color: blue;
    }`);
    }));
    it('setInlineStyle', () => __awaiter(void 0, void 0, void 0, function* () {
        view.setObjectName('test');
        yield view.setInlineStyle('color: black;');
        expect(view.styleSheet()).toEqual(`
      #test {
        color: black;
      }
  `);
    }));
    it('setGeometry', () => {
        view.setGeometry(10, 11, 12, 13);
        const rect = view.geometry();
        expect(rect.x).toEqual(10);
        expect(rect.y).toEqual(11);
        expect(rect.width).toEqual(12);
        expect(rect.height).toEqual(13);
    });
    it('setObjectName', () => {
        view.setObjectName('abcd');
        expect(view.objectName()).toBe('abcd');
    });
    it('setMouseTracking', () => {
        view.setMouseTracking(true);
        expect(view.hasMouseTracking()).toBe(true);
        view.setMouseTracking(false);
        expect(view.hasMouseTracking()).toBe(false);
    });
    it('setEnabled', () => {
        view.setEnabled(true);
        expect(view.isEnabled()).toBe(true);
        view.setEnabled(false);
        expect(view.isEnabled()).toBe(false);
    });
    it('setFixedSize', () => {
        view.setFixedSize(10, 12);
        expect(view.size()).toEqual({ width: 10, height: 12 });
    });
    it('setWindowOpacity', () => {
        view.setWindowOpacity(0.6);
        expect(view.windowOpacity().toFixed(1)).toBe(`0.6`);
    });
});
