"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const addon_1 = __importDefault(require("../utils/addon"));
const QWidget_1 = require("./QWidget");
const EventWidget_1 = require("../core/EventWidget");
exports.QLineEditEvents = Object.freeze(Object.assign(Object.assign({}, EventWidget_1.BaseWidgetEvents), { cursorPositionChanged: 'cursorPositionChanged', editingFinished: 'editingFinished', inputRejected: 'inputRejected', returnPressed: 'returnPressed', selectionChanged: 'selectionChanged', textChanged: 'textChanged', textEdited: 'textEdited' }));
class QLineEdit extends QWidget_1.NodeWidget {
    constructor(parent) {
        let native;
        if (parent) {
            native = new addon_1.default.QLineEdit(parent.native);
        }
        else {
            native = new addon_1.default.QLineEdit();
        }
        super(native);
        this.native = native;
        this.nodeParent = parent;
    }
    setText(text) {
        // react:✓
        text && this.native.setText(text);
    }
    text() {
        // react:✓
        return this.native.text();
    }
    setPlaceholderText(text) {
        // react:✓ TODO://getter
        this.placeholderText = text;
        this.native.setPlaceholderText(text);
    }
    setReadOnly(isReadOnly) {
        // react:✓ TODO://getter
        this.native.setReadOnly(isReadOnly);
    }
    clear() {
        // react:✓
        this.native.clear();
    }
}
exports.QLineEdit = QLineEdit;
