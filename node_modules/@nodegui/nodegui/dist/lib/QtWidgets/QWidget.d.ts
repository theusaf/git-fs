import { NodeLayout } from './QLayout';
import { NativeElement } from '../core/Component';
import { WidgetAttribute, WindowType } from '../QtEnums';
import { QIcon } from '../QtGui/QIcon';
import { QCursor } from '../QtGui/QCursor';
import { CursorShape, WindowState } from '../QtEnums';
import { YogaWidget } from '../core/YogaWidget';
export declare abstract class NodeWidget extends YogaWidget {
    layout?: NodeLayout;
    type: string;
    show(): void;
    hide(): void;
    isVisible(): boolean;
    close(): boolean;
    setStyleSheet(styleSheet: string): Promise<void>;
    styleSheet(): string;
    setInlineStyle(style: string): Promise<void>;
    setGeometry(x: number, y: number, w: number, h: number): void;
    geometry(): Rect;
    setMouseTracking(isMouseTracked: boolean): void;
    hasMouseTracking(): boolean;
    setEnabled(enabled: boolean): void;
    isEnabled(): boolean;
    setWindowOpacity(opacity: number): void;
    windowOpacity(): number;
    setWindowTitle(title: string): void;
    setWindowState(state: WindowState): void;
    setCursor(cursor: CursorShape | QCursor): void;
    setWindowIcon(icon: QIcon): void;
    setMinimumSize(minw: number, minh: number): void;
    setMaximumSize(maxw: number, maxh: number): void;
    setFixedSize(width: number, height: number): void;
    resize(width: number, height: number): void;
    size(): {
        width: number;
        height: number;
    };
    move(x: number, y: number): void;
    pos(): {
        x: number;
        y: number;
    };
    repaint(): void;
    update(): void;
    updateGeometry(): void;
    setAttribute(attribute: WidgetAttribute, switchOn: boolean): void;
    testAttribute(attribute: WidgetAttribute): boolean;
    setWindowFlag(windowType: WindowType, switchOn: boolean): void;
    setLayout(parentLayout: NodeLayout): void;
}
declare type Rect = {
    x: number;
    y: number;
    width: number;
    height: number;
};
declare type arg = NodeWidget | NativeElement;
export declare class QWidget extends NodeWidget {
    native: NativeElement;
    constructor(arg?: arg);
}
export declare const QWidgetEvents: Readonly<{
    None: string;
    ActionAdded: string;
    ActionChanged: string;
    ActionRemoved: string;
    ActivationChange: string;
    ApplicationActivate: string;
    ApplicationActivated: string;
    ApplicationDeactivate: string;
    ApplicationFontChange: string;
    ApplicationLayoutDirectionChange: string;
    ApplicationPaletteChange: string;
    ApplicationStateChange: string;
    ApplicationWindowIconChange: string;
    ChildAdded: string;
    ChildPolished: string;
    ChildRemoved: string;
    Clipboard: string;
    Close: string;
    CloseSoftwareInputPanel: string;
    ContentsRectChange: string;
    ContextMenu: string;
    CursorChange: string;
    DeferredDelete: string;
    DragEnter: string;
    DragLeave: string;
    DragMove: string;
    Drop: string;
    DynamicPropertyChange: string;
    EnabledChange: string;
    Enter: string;
    EnterWhatsThisMode: string;
    Expose: string;
    FileOpen: string;
    FocusIn: string;
    FocusOut: string;
    FocusAboutToChange: string;
    FontChange: string;
    Gesture: string;
    GestureOverride: string;
    GrabKeyboard: string;
    GrabMouse: string;
    GraphicsSceneContextMenu: string;
    GraphicsSceneDragEnter: string;
    GraphicsSceneDragLeave: string;
    GraphicsSceneDragMove: string;
    GraphicsSceneDrop: string;
    GraphicsSceneHelp: string;
    GraphicsSceneHoverEnter: string;
    GraphicsSceneHoverLeave: string;
    GraphicsSceneHoverMove: string;
    GraphicsSceneMouseDoubleClick: string;
    GraphicsSceneMouseMove: string;
    GraphicsSceneMousePress: string;
    GraphicsSceneMouseRelease: string;
    GraphicsSceneMove: string;
    GraphicsSceneResize: string;
    GraphicsSceneWheel: string;
    Hide: string;
    HideToParent: string;
    HoverEnter: string;
    HoverLeave: string;
    HoverMove: string;
    IconDrag: string;
    IconTextChange: string;
    InputMethod: string;
    InputMethodQuery: string;
    KeyboardLayoutChange: string;
    KeyPress: string;
    KeyRelease: string;
    LanguageChange: string;
    LayoutDirectionChange: string;
    LayoutRequest: string;
    Leave: string;
    LeaveWhatsThisMode: string;
    LocaleChange: string;
    NonClientAreaMouseButtonDblClick: string;
    NonClientAreaMouseButtonPress: string;
    NonClientAreaMouseButtonRelease: string;
    NonClientAreaMouseMove: string;
    MacSizeChange: string;
    MetaCall: string;
    ModifiedChange: string;
    MouseButtonDblClick: string;
    MouseButtonPress: string;
    MouseButtonRelease: string;
    MouseMove: string;
    MouseTrackingChange: string;
    Move: string;
    NativeGesture: string;
    OrientationChange: string;
    Paint: string;
    PaletteChange: string;
    ParentAboutToChange: string;
    ParentChange: string;
    PlatformPanel: string;
    PlatformSurface: string;
    Polish: string;
    PolishRequest: string;
    QueryWhatsThis: string;
    ReadOnlyChange: string;
    RequestSoftwareInputPanel: string;
    Resize: string;
    ScrollPrepare: string;
    Scroll: string;
    Shortcut: string;
    ShortcutOverride: string;
    Show: string;
    ShowToParent: string;
    SockAct: string;
    StateMachineSignal: string;
    StateMachineWrapped: string;
    StatusTip: string;
    StyleChange: string;
    TabletMove: string;
    TabletPress: string;
    TabletRelease: string;
    TabletEnterProximity: string;
    TabletLeaveProximity: string;
    TabletTrackingChange: string;
    ThreadChange: string;
    Timer: string;
    ToolBarChange: string;
    ToolTip: string;
    ToolTipChange: string;
    TouchBegin: string;
    TouchCancel: string;
    TouchEnd: string;
    TouchUpdate: string;
    UngrabKeyboard: string;
    UngrabMouse: string;
    UpdateLater: string;
    UpdateRequest: string;
    WhatsThis: string;
    WhatsThisClicked: string;
    Wheel: string;
    WinEventAct: string;
    WindowActivate: string;
    WindowBlocked: string;
    WindowDeactivate: string;
    WindowIconChange: string;
    WindowStateChange: string;
    WindowTitleChange: string;
    WindowUnblocked: string;
    WinIdChange: string;
    ZOrderChange: string;
}>;
export {};
