"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const addon_1 = __importDefault(require("../utils/addon"));
const QWidget_1 = require("./QWidget");
const EventWidget_1 = require("../core/EventWidget");
exports.QMainWindowEvents = Object.freeze(Object.assign({}, EventWidget_1.BaseWidgetEvents));
class QMainWindow extends QWidget_1.NodeWidget {
    constructor(parent) {
        let native;
        if (parent) {
            native = new addon_1.default.QMainWindow(parent.native);
        }
        else {
            native = new addon_1.default.QMainWindow();
        }
        super(native);
        this.native = native;
        this.nodeParent = parent;
        this.setLayout = (parentLayout) => {
            if (this.centralWidget) {
                this.centralWidget.setLayout(parentLayout);
            }
            else {
                this.native.setLayout(parentLayout.native);
                super.layout = parentLayout;
            }
        };
    }
    setCentralWidget(widget) {
        // react:âœ“
        this.native.setCentralWidget(widget.native, widget.getFlexNode());
        this.centralWidget = widget;
    }
    setMenuBar(menuBar) {
        this.native.setMenuBar(menuBar.native);
        this._menuBar = menuBar;
    }
    menuBar() {
        return this._menuBar;
    }
    setMenuWidget(menuWidget) {
        this.native.setMenuWidget(menuWidget.native);
    }
    get layout() {
        if (this.centralWidget) {
            return this.centralWidget.layout;
        }
        else {
            return super.layout;
        }
    }
    center() {
        this.native.center();
    }
}
exports.QMainWindow = QMainWindow;
