"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const addon_1 = __importDefault(require("../utils/addon"));
const EventWidget_1 = require("../core/EventWidget");
const QAbstractScrollArea_1 = require("./QAbstractScrollArea");
exports.QPlainTextEditEvents = Object.freeze(Object.assign(Object.assign({}, EventWidget_1.BaseWidgetEvents), { textChanged: 'textChanged', blockCountChanged: 'blockCountChanged', copyAvailable: 'copyAvailable', cursorPositionChanged: 'cursorPositionChanged', modificationChanged: 'modificationChanged', redoAvailable: 'redoAvailable', selectionChanged: 'selectionChanged', undoAvailable: 'undoAvailable' }));
var LineWrapMode;
(function (LineWrapMode) {
    LineWrapMode[LineWrapMode["NoWrap"] = 0] = "NoWrap";
    LineWrapMode[LineWrapMode["WidgetWidth"] = 1] = "WidgetWidth";
})(LineWrapMode = exports.LineWrapMode || (exports.LineWrapMode = {}));
class QPlainTextEdit extends QAbstractScrollArea_1.QAbstractScrollArea {
    constructor(parent) {
        let native;
        if (parent) {
            native = new addon_1.default.QPlainTextEdit(parent.native);
        }
        else {
            native = new addon_1.default.QPlainTextEdit();
        }
        super(native);
        this.native = native;
        this.nodeParent = parent;
    }
    setPlainText(text) {
        // react:✓
        this.native.setPlainText(`${text}`);
    }
    setPlaceholderText(text) {
        // react:✓, //TODO:getter
        this.placeholderText = text;
        this.native.setPlaceholderText(text);
    }
    toPlainText() {
        // react:✓
        return this.native.toPlainText();
    }
    setReadOnly(isReadOnly) {
        // react:✓
        this.native.setReadOnly(isReadOnly);
    }
    clear() {
        // react:✓
        this.native.clear();
    }
    setWordWrapMode(mode) {
        this.native.setWordWrapMode(mode);
    }
    wordWrapMode() {
        return this.native.wordWrapMode();
    }
    setLineWrapMode(mode) {
        this.native.setLineWrapMode(mode);
    }
    lineWrapMode() {
        return this.native.lineWrapMode();
    }
}
exports.QPlainTextEdit = QPlainTextEdit;
