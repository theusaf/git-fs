"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const addon_1 = __importDefault(require("../utils/addon"));
const QObject_1 = require("../QtCore/QObject");
exports.QActionEvents = Object.freeze({
    triggered: 'triggered',
    changed: 'changed',
    hovered: 'hovered',
    toggled: 'toggled',
});
class QAction extends QObject_1.NodeObject {
    constructor(parent) {
        let native;
        if (parent) {
            native = new addon_1.default.QAction(parent.native);
        }
        else {
            native = new addon_1.default.QAction();
        }
        super(native);
        this.native = native;
    }
    setText(text) {
        this.native.setText(text);
    }
    setEnabled(enabled) {
        this.native.setEnabled(enabled);
    }
    setIcon(icon) {
        this.icon = icon;
        this.native.setIcon(icon.native);
    }
    setMenu(menu) {
        this.menu = menu;
        this.native.setMenu(menu.native);
    }
    setShortcut(keysequence) {
        this.native.setShortcut(keysequence.native);
    }
    setShortcutContext(shortcutContext) {
        this.native.setShortcutContext(shortcutContext);
    }
    isCheckable() {
        return this.native.isCheckable();
    }
    setCheckable(isCheckable) {
        this.native.setCheckable(isCheckable);
    }
    isChecked() {
        return this.native.isChecked();
    }
    setChecked(isChecked) {
        this.native.setChecked(isChecked);
    }
    isSeparator() {
        return this.native.isSeparator();
    }
    setSeparator(isSeparator) {
        this.native.setSeparator(isSeparator);
    }
}
exports.QAction = QAction;
