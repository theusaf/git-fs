"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const addon_1 = __importDefault(require("../utils/addon"));
const QWidget_1 = require("./QWidget");
const EventWidget_1 = require("../core/EventWidget");
exports.QTabWidgetEvents = Object.freeze(Object.assign(Object.assign({}, EventWidget_1.BaseWidgetEvents), { currentChanged: 'currentChanged', tabBarClicked: 'tabBarClicked', tabBarDoubleClicked: 'tabBarDoubleClicked', tabCloseRequested: 'tabCloseRequested' }));
class QTabWidget extends QWidget_1.NodeWidget {
    constructor(parent) {
        let native;
        if (parent) {
            native = new addon_1.default.QTabWidget(parent.native);
        }
        else {
            native = new addon_1.default.QTabWidget();
        }
        super(native);
        this.nodeParent = parent;
        this.native = native;
    }
    addTab(page, icon, label) {
        this.nodeChildren.add(page);
        this.native.addTab(page.native, icon.native, label);
    }
    setTabPosition(tabPosition) {
        this.native.setTabPosition(tabPosition);
    }
    setCurrentIndex(index) {
        this.native.setCurrentIndex(index);
    }
    currentIndex() {
        return this.native.currentIndex();
    }
    removeTab(index) {
        this.native.removeTab(index);
    }
    setTabsClosable(closeable) {
        this.native.setTabsClosable(closeable);
    }
}
exports.QTabWidget = QTabWidget;
