"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const addon_1 = __importDefault(require("../utils/addon"));
const EventWidget_1 = require("../core/EventWidget");
const StyleSheet_1 = require("../core/Style/StyleSheet");
const helpers_1 = require("../utils/helpers");
const YogaWidget_1 = require("../core/YogaWidget");
// All Widgets should extend from NodeWidget
// Implement all native QWidget methods here so that all widgets get access to those aswell
class NodeWidget extends YogaWidget_1.YogaWidget {
    constructor() {
        super(...arguments);
        this.type = 'widget';
    }
    show() {
        this.native.show();
    }
    hide() {
        this.native.hide();
    }
    isVisible() {
        return this.native.isVisible();
    }
    close() {
        return this.native.close();
    }
    setStyleSheet(styleSheet) {
        return __awaiter(this, void 0, void 0, function* () {
            const preparedSheet = yield StyleSheet_1.StyleSheet.create(styleSheet);
            yield StyleSheet_1.applyStyleSheet(this, preparedSheet);
        });
    }
    styleSheet() {
        return this.native.styleSheet();
    }
    setInlineStyle(style) {
        return __awaiter(this, void 0, void 0, function* () {
            const preparedSheet = yield StyleSheet_1.prepareInlineStyleSheet(this, style);
            yield StyleSheet_1.applyStyleSheet(this, preparedSheet);
        });
    }
    setGeometry(x, y, w, h) {
        this.native.setGeometry(x, y, w, h);
    }
    geometry() {
        return this.native.geometry();
    }
    setMouseTracking(isMouseTracked) {
        this.native.setMouseTracking(isMouseTracked);
    }
    hasMouseTracking() {
        return this.native.hasMouseTracking();
    }
    setEnabled(enabled) {
        this.native.setEnabled(enabled);
    }
    isEnabled() {
        return this.native.isEnabled();
    }
    setWindowOpacity(opacity) {
        this.native.setWindowOpacity(opacity);
    }
    windowOpacity() {
        return this.native.windowOpacity();
    }
    setWindowTitle(title) {
        //TODO:getter
        return this.native.setWindowTitle(title);
    }
    setWindowState(state) {
        //TODO:getter
        return this.native.setWindowState(state);
    }
    setCursor(cursor) {
        //TODO:getter
        this.native.setCursor(cursor);
    }
    setWindowIcon(icon) {
        //TODO:getter
        this.native.setWindowIcon(icon.native);
    }
    setMinimumSize(minw, minh) {
        this.native.setMinimumSize(minw, minh);
    }
    setMaximumSize(maxw, maxh) {
        this.native.setMaximumSize(maxw, maxh);
    }
    setFixedSize(width, height) {
        this.native.setFixedSize(width, height);
    }
    resize(width, height) {
        this.native.resize(width, height);
    }
    size() {
        return this.native.size();
    }
    move(x, y) {
        this.native.move(x, y);
    }
    pos() {
        return this.native.pos();
    }
    repaint() {
        // react:⛔️
        this.native.repaint();
    }
    update() {
        // react:⛔️
        this.native.update();
    }
    updateGeometry() {
        // react:⛔️
        this.native.updateGeometry();
    }
    setAttribute(attribute, switchOn) {
        // react:⛔️
        return this.native.setAttribute(attribute, switchOn);
    }
    testAttribute(attribute) {
        // react:⛔️
        return this.native.testAttribute(attribute);
    }
    setWindowFlag(windowType, switchOn) {
        // react:⛔️
        return this.native.setWindowFlag(windowType, switchOn);
    }
    setLayout(parentLayout) {
        const flexLayout = parentLayout;
        if (flexLayout.setFlexNode) {
            //if flex layout set the flexnode
            flexLayout.setFlexNode(this.getFlexNode());
        }
        this.native.setLayout(parentLayout.native);
        this.layout = parentLayout;
    }
}
exports.NodeWidget = NodeWidget;
class QWidget extends NodeWidget {
    constructor(arg) {
        let native;
        let parent;
        if (helpers_1.checkIfNativeElement(arg)) {
            native = arg;
        }
        else if (arg) {
            parent = arg;
            native = new addon_1.default.QWidget(parent.native);
        }
        else {
            native = new addon_1.default.QWidget();
        }
        super(native);
        this.nodeParent = parent;
        this.native = native;
    }
}
exports.QWidget = QWidget;
exports.QWidgetEvents = EventWidget_1.BaseWidgetEvents;
