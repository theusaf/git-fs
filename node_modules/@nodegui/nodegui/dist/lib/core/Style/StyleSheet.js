"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const postcss_1 = __importDefault(require("postcss"));
const cuid_1 = __importDefault(require("cuid"));
const postcss_nodegui_autoprefixer_1 = __importDefault(require("postcss-nodegui-autoprefixer"));
class StyleSheet {
}
exports.StyleSheet = StyleSheet;
StyleSheet.create = (cssString) => __awaiter(void 0, void 0, void 0, function* () {
    const { css } = yield postcss_1.default([postcss_nodegui_autoprefixer_1.default()])
        .process(cssString, { from: undefined })
        .catch(err => {
        console.warn(`Error autoprefixing`, err);
        return { css: cssString };
    });
    return css;
});
function prepareInlineStyleSheet(widget, rawStyle) {
    return __awaiter(this, void 0, void 0, function* () {
        const inlineStyle = yield StyleSheet.create(rawStyle);
        // Make sure to not calculate ObjectName in the same pass of event loop as other props (incase of react) since the order will matter in that case
        // So doing it in multiple passes of event loop allows objectName to be set before using it. The above await solves it.
        let cssId = widget.objectName();
        if (!cssId) {
            cssId = cuid_1.default();
            widget.setObjectName(cssId);
        }
        return `
      #${cssId} {
        ${inlineStyle}
      }
  `;
    });
}
exports.prepareInlineStyleSheet = prepareInlineStyleSheet;
function applyStyleSheet(widget, styleSheet) {
    return __awaiter(this, void 0, void 0, function* () {
        widget.native.setStyleSheet(styleSheet);
        widget.layout ? widget.layout.update() : widget.update();
    });
}
exports.applyStyleSheet = applyStyleSheet;
